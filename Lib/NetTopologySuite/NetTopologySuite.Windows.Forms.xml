<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetTopologySuite.Windows.Forms</name>
    </assembly>
    <members>
        <member name="T:NetTopologySuite.Windows.Forms.FontGlyphReader">
            <summary>
             Provides methods to read <see cref="T:System.Drawing.Font"/> glyphs for strings 
             into <see cref="T:GeoAPI.Geometries.IPolygonal"/> geometry.
            </summary>
             <remarks>
             <para>
             It is suggested to use larger point sizes to render fonts glyphs, to reduce the effects of scale-dependent hints.</para>
             <para>The result geometry is in the base coordinate system of that font.</para>
             <para>The geometry can be further transformed as necessary using <see cref="T:NetTopologySuite.Geometries.Utilities.AffineTransformation"/>s</para>
             </remarks>
             <author>Martin Davis</author>
        </member>
        <member name="F:NetTopologySuite.Windows.Forms.FontGlyphReader.FontSerif">
            The font name of the Java logical font Serif.
            <summary>
            The font name of the Java logical font Serif.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Windows.Forms.FontGlyphReader.FontSanserif">
            <summary>
            The font name of the Java logical font SansSerif.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Windows.Forms.FontGlyphReader.FontSansSerif">
            <summary>
            The font name of the Java logical font SansSerif.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Windows.Forms.FontGlyphReader.FontMonospaced">
            <summary>
            The font name of the Java logical font Monospaced.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Windows.Forms.FontGlyphReader.Read(System.String,System.Drawing.FontFamily,System.Int32,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
             Converts text rendered in the given <see cref="T:System.Drawing.Font"/> and pointsize to a <see cref="T:GeoAPI.Geometries.IGeometry"/> using a standard flatness factor.
             </summary>
             <param name="text">The text to render</param>
             <param name="font">The <see cref="T:System.Drawing.FontFamily"/></param>
             <param name="pointSize">The pointSize to render at</param>
             <param name="geomFact">The geometry factory to use to create the result</param>
             <returns>A polygonal geometry representing the rendered text</returns>
        </member>
        <member name="M:NetTopologySuite.Windows.Forms.FontGlyphReader.Read(System.String,System.Drawing.FontFamily,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
             Converts text rendered in the given <see cref="T:System.Drawing.Font"/> to a <see cref="T:GeoAPI.Geometries.IGeometry"/> using a standard flatness factor.
             </summary>
             <param name="text">The text to render</param>
             <param name="font">The <see cref="T:System.Drawing.FontFamily"/></param>
             <param name="geomFact">The geometry factory to use to create the result</param>
             <returns>A polygonal geometry representing the rendered text</returns>
        </member>
        <member name="M:NetTopologySuite.Windows.Forms.FontGlyphReader.Read(System.String,System.Drawing.FontFamily,System.Drawing.FontStyle,System.Single,System.Drawing.PointF,System.Drawing.StringFormat,System.Double,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
             Converts text rendered in the given <see cref="T:System.Drawing.Font"/> and pointsize to a <see cref="T:GeoAPI.Geometries.IGeometry"/> using a standard flatness factor.
             </summary>
             <param name="text">The text to render</param>
             <param name="font">The <see cref="T:System.Drawing.FontFamily"/></param>
             <param name="size">The size to render at</param>
             <param name="style">The style to use</param>
             <param name="flatness">The flatness to use</param>
             <param name="origin">The point to start</param>
             <param name="stringFormat">The string format to use</param>
             <param name="geomFact">The geometry factory to use to create the result</param>
             <returns>A polygonal geometry representing the rendered text</returns>
        </member>
        <member name="T:NetTopologySuite.Windows.Forms.GeometryCollectionGraphicsPath">
            <summary>
             A list of <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> which contains a heterogeneous collection of other shapes
             representing NTS <see cref="T:GeoAPI.Geometries.IGeometry"/>s.
            </summary>
        </member>
        <member name="T:NetTopologySuite.Windows.Forms.GraphicsPathReader">
            <summary>
             Converts a DotNet <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>
             or the more general <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator"/> into a <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            </summary>
            <remarks>
             <para>
             The coordinate system for <see cref="T:System.Drawing.Graphics"/> is typically screen coordinates, 
             which has the Y axis inverted  relative to the usual JTS coordinate system.
             This is rectified during conversion. </para>
             <para>
             GraphicsPaths to be converted are expected to be linear or flat.
             That is, <see cref="M:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve"/> must always return false.
             Otherwise an exception will be thrown.
             </para>
             </remarks>  
             <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Windows.Forms.GraphicsPathReader.Read(System.Drawing.Drawing2D.GraphicsPathIterator,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
             Converts a flat path to a <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            </summary>
             <param name="pathIt">The path to convert</param>
             <param name="geomFact">The GeometryFactory to use</param>
             <returns>A Geometry representing the path</returns>
        </member>
        <member name="M:NetTopologySuite.Windows.Forms.GraphicsPathReader.Read(System.Drawing.Drawing2D.GraphicsPath,System.Double,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
             Converts a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> to a Geometry, flattening it first.
            </summary>
             <param name="shp">The <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/></param>
             <param name="flatness">The flatness parameter to use</param>
             <param name="geomFact">The GeometryFactory to use</param>
             <returns>A Geometry representing the shape</returns>
        </member>
        <member name="M:NetTopologySuite.Windows.Forms.GraphicsPathReader.Read(System.Drawing.Drawing2D.GraphicsPathIterator)">
            <summary>
             Converts a flat path to a <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            </summary>
             <param name="pathIt">The path iterator of the path to convert</param>
             <returns>A Geometry representing the path</returns>
        </member>
        <member name="M:NetTopologySuite.Windows.Forms.GraphicsPathReader.ToCoordinates(System.Drawing.Drawing2D.GraphicsPathIterator)">
            <summary>
             Extracts the points of the paths in a flat {@link PathIterator} into
             a list of Coordinate arrays.
            </summary>
             <param name="pathIt">A path iterator</param>
             <returns>A list of coordinate arrays</returns>
             <exception cref="T:System.ArgumentException">If a non-linear segment type is encountered</exception>
        </member>
        <member name="T:NetTopologySuite.Windows.Forms.GraphicsPathWriter">
            <summary>
             Writes <see cref="T:GeoAPI.Geometries.IGeometry"/>s int System.Drawing.Drawing2D's <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>s
             of the appropriate type.
             This supports rendering geometries using System.Drawing.
             The GraphicsPathWriter allows supplying a <see cref="T:NetTopologySuite.Windows.Forms.IPointTransformation"/>
             class, to transform coordinates from model space into view space.
             This is useful if a client is providing its own transformation
             logic, rather than relying on <see cref="T:System.Drawing.Drawing2D.Matrix"/>.
             <para/>
             The writer supports removing duplicate consecutive points
             (via the <see cref="P:NetTopologySuite.Windows.Forms.GraphicsPathWriter.RemoveDuplicatePoints"/> property) 
             as well as true <b>decimation</b>
             (via the <see cref="P:NetTopologySuite.Windows.Forms.GraphicsPathWriter.Decimation"/> property. 
             Enabling one of these strategies can substantially improve 
             rendering speed for large geometries.
             It is only necessary to enable one strategy.
             Using decimation is preferred, but this requires 
             determining a distance below which input geometry vertices
             can be considered unique (which may not always be feasible).
             If neither strategy is enabled, all vertices
             of the input <tt>Geometry</tt>
             will be represented in the output <tt>GraphicsPath</tt>.
             </summary>
        </member>
        <member name="F:NetTopologySuite.Windows.Forms.GraphicsPathWriter.DefaultPointTransformation">
            <summary>
            The point transformation used by default.
            </summary>
        </member>
        <member name="F:NetTopologySuite.Windows.Forms.GraphicsPathWriter.DefaultPointFactory">
            <summary>
            The point shape factory used by default.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Windows.Forms.GraphicsPathWriter.#ctor(NetTopologySuite.Windows.Forms.IPointTransformation,NetTopologySuite.Windows.Forms.IPointShapeFactory)">
            <summary>
             Creates a new GraphicsPathWriter with a specified point transformation and point shape factory.
            </summary>
             <param name="pointTransformer">A transformation from model to view space to use </param>
             <param name="pointFactory">The PointShapeFactory to use</param>
        </member>
        <member name="M:NetTopologySuite.Windows.Forms.GraphicsPathWriter.#ctor(NetTopologySuite.Windows.Forms.IPointTransformation)">
            <summary>
             Creates a new GraphicsPathWriter with a specified point transformation and the default point shape factory.
            </summary>
             <param name="pointTransformer">A transformation from model to view space to use </param>
        </member>
        <member name="M:NetTopologySuite.Windows.Forms.GraphicsPathWriter.#ctor">
            <summary>
             Creates a new GraphicsPathWriter with the default (identity) point transformation.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Windows.Forms.GraphicsPathWriter.RemoveDuplicatePoints">
            <summary>
            Gets or sets whether duplicate consecutive points should be eliminated.
            This can reduce the size of the generated Shapes
            and improve rendering speed, especially in situations
            where a transform reduces the extent of the geometry.
            <para/>
            The default is <tt>false</tt>.
            </summary>
        </member>
        <member name="P:NetTopologySuite.Windows.Forms.GraphicsPathWriter.Decimation">
            <summary>
            Gets or sets the decimation distance used to determine
            whether vertices of the input geometry are 
            considered to be duplicate and thus removed.
            The distance is axis distance, not Euclidean distance.
            The distance is specified in the input geometry coordinate system
            (NOT the transformed output coordinate system).
            <para/>
            When rendering to a screen image, a suitably small distance should be used
            to avoid obvious rendering defects.  
            A distance equivalent to 2 pixels or less is recommended
            (and perhaps even smaller to avoid any chance of visible artifacts).
            <para/>
            The default distance is 0.0, which disables decimation.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Windows.Forms.GraphicsPathWriter.ToShape(GeoAPI.Geometries.IGeometry)">
            <summary>
             Creates a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> representing a <see cref="T:GeoAPI.Geometries.IGeometry"/>, according to the specified PointTransformation and PointShapeFactory (if relevant).
            </summary>
            <remarks>
             Note that GraphicsPaths do not preserve information about which elements in heterogeneous collections are 1D and which are 2D.
             For example, a GeometryCollection containing a ring and a disk will render as two disks if Graphics.FillPath is used,
             or as two rings if Graphics.DrawPath is used. To avoid this issue use separate shapes for the components.
            </remarks>
        </member>
        <member name="T:NetTopologySuite.Windows.Forms.IdentityPointTransformation">
            <summary>
            Point transformation class, copies ordinates with no transformation
            </summary>
        </member>
        <member name="M:NetTopologySuite.Windows.Forms.IdentityPointTransformation.Transform(GeoAPI.Geometries.Coordinate,System.Drawing.PointF@)">
            <summary>
             Transforms a <see cref="T:GeoAPI.Geometries.Coordinate"/> into a <see cref="T:System.Drawing.PointF"/>.
            </summary>
            <param name="model">The model coordinate</param>
            <param name="view">The view point</param>
        </member>
        <member name="M:NetTopologySuite.Windows.Forms.IdentityPointTransformation.Transform(GeoAPI.Geometries.Coordinate)">
            <summary>
             Transforms a <see cref="T:GeoAPI.Geometries.Coordinate"/> into a <see cref="T:System.Drawing.PointF"/>.
            </summary>
            <param name="model">The model coordinate</param>
             <returns>A point for the view</returns>
        </member>
        <member name="M:NetTopologySuite.Windows.Forms.IdentityPointTransformation.Transform(GeoAPI.Geometries.Coordinate[])">
            <summary>
            Transforms an array of <see cref="T:GeoAPI.Geometries.Coordinate"/>s into an array of <see cref="T:System.Drawing.PointF"/>s.
            </summary>
            <param name="model">An array of <see cref="T:GeoAPI.Geometries.Coordinate"/>s</param>
            <returns>An array of <see cref="T:System.Drawing.PointF"/>s</returns>
        </member>
        <member name="T:NetTopologySuite.Windows.Forms.IPointTransformation">
            <summary>
             Transforms a geometry <see cref="T:GeoAPI.Geometries.Coordinate"/> into a <see cref="T:System.Drawing.PointF"/>,
             possibly with a mathematical transformation of the ordinate values.
             Transformation from a model coordinate system to a view coordinate system
             can be efficiently performed by supplying an appropriate transformation.
             </summary>
             <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Windows.Forms.IPointTransformation.Transform(GeoAPI.Geometries.Coordinate)">
            <summary>
             Transforms a <see cref="T:GeoAPI.Geometries.Coordinate"/> into a <see cref="T:System.Drawing.PointF"/>.
            </summary>
            <param name="model">The model coordinate</param>
             <returns>A point for the view</returns>
        </member>
        <member name="M:NetTopologySuite.Windows.Forms.IPointTransformation.Transform(GeoAPI.Geometries.Coordinate,System.Drawing.PointF@)">
            <summary>
             Transforms a <see cref="T:GeoAPI.Geometries.Coordinate"/> into a <see cref="T:System.Drawing.PointF"/>.
            </summary>
            <param name="model">The model coordinate</param>
            <param name="view">The view point</param>
        </member>
        <member name="M:NetTopologySuite.Windows.Forms.IPointTransformation.Transform(GeoAPI.Geometries.Coordinate[])">
            <summary>
            Transforms an array of <see cref="T:GeoAPI.Geometries.Coordinate"/>s into an array of <see cref="T:System.Drawing.PointF"/>s.
            </summary>
            <param name="modelCoordinates">An array of <see cref="T:GeoAPI.Geometries.Coordinate"/>s</param>
            <returns>An array of <see cref="T:System.Drawing.PointF"/>s</returns>
        </member>
        <member name="M:NetTopologySuite.Windows.Forms.IPointTransformation.Transform(GeoAPI.Geometries.ICoordinateSequence)">
            <summary>
            Transforms an array of <see cref="T:GeoAPI.Geometries.Coordinate"/>s into an array of <see cref="T:System.Drawing.PointF"/>s.
            </summary>
            <param name="modelSequence">A sequence of coordinates</param>
            <returns>An array of <see cref="T:System.Drawing.PointF"/>s</returns>
        </member>
        <member name="T:NetTopologySuite.Windows.Forms.IPointShapeFactory">
            <summary>
             An interface for classes which create <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>s to represent
             <see cref="T:GeoAPI.Geometries.IPoint"/> geometries. Windows.Forms does not provide an actual 
             point shape, so some other shape must be used to render points (e.g. such 
             as a Rectangle or Ellipse)
            </summary>
             <author>Martin Davis</author>
        </member>
        <member name="M:NetTopologySuite.Windows.Forms.IPointShapeFactory.CreatePoint(System.Drawing.PointF)">
            <summary>
             Creates a shape representing an <see cref="T:GeoAPI.Geometries.IPoint"/>.
            </summary>
             <param name="point">The location of the point</param>
             <returns>A <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/></returns>
        </member>
        <member name="F:NetTopologySuite.Windows.Forms.BasePointShapeFactory.DefaultSize">
            <summary>
             The default size of the shape
            </summary>
        </member>
        <member name="M:NetTopologySuite.Windows.Forms.BasePointShapeFactory.#ctor">
            <summary>
             Creates a new factory for points with default size.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Windows.Forms.BasePointShapeFactory.#ctor(System.Double)">
            <summary>
             Creates a factory for points of given size.
            </summary>
             <param name="size">The size of the points</param>
        </member>
        <member name="M:NetTopologySuite.Windows.Forms.BasePointShapeFactory.CreatePoint(System.Drawing.PointF)">
            <summary>
             Creates a shape representing an <see cref="T:GeoAPI.Geometries.IPoint"/>.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Windows.Forms.Dot.#ctor">
            <summary>
             Creates a new factory for points with default size.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Windows.Forms.Square.#ctor">
            <summary>
             Creates a new factory for points with default size.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Windows.Forms.Star.#ctor">
            <summary>
             Creates a new factory for points with default size.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Windows.Forms.Triangle.#ctor">
            <summary>
             Creates a new factory for points with default size.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Windows.Forms.Circle.#ctor">
            <summary>
             Creates a new factory for points with default size.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Windows.Forms.Cross.#ctor">
            <summary>
             Creates a new factory for points with default size.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Windows.Forms.X.#ctor">
            <summary>
             Creates a new factory for points with default size.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Windows.Forms.PolygonGraphicsPath.#ctor(GeoAPI.Geometries.Coordinate[],System.Collections.Generic.IEnumerable{GeoAPI.Geometries.Coordinate[]})">
            <summary>
             Creates a new polygon shape.
            </summary>
             <param name="shellVertices">The vertices of the shell</param>
             <param name="holeVerticesCollection">A collection of ICoordinate[] for each hole</param>
        </member>
        <member name="M:NetTopologySuite.Windows.Forms.PolygonGraphicsPath.ToPath(GeoAPI.Geometries.Coordinate[])">
            <summary>
             Creates a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> representing a polygon ring
             having the given coordinate sequence.
            </summary>
             <remarks>
             Uses <see cref="F:System.Drawing.Drawing2D.FillMode.Alternate"/> winding rule
             </remarks>
             <param name="coordinates">A coordinate sequence</param>
             <returns>The path for the coordinate sequence</returns>
        </member>
    </members>
</doc>
