<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetTopologySuite.Lab</name>
    </assembly>
    <members>
        <member name="T:NetTopologySuite.Geometries.Utilities.GeometryEditorEx">
            <summary>
            A class which supports creating new <see cref="T:GeoAPI.Geometries.IGeometry"/>s
            which are modifications of existing ones,
            maintaining the same type structure.
            Geometry objects are intended to be treated as immutable.
            This class "modifies" Geometrys<see cref="T:GeoAPI.Geometries.IGeometry"/>s
            by traversing them, applying a user-defined
            <see cref="T:NetTopologySuite.Geometries.Utilities.GeometryEditor.IGeometryEditorOperation"/>, <see cref="T:NetTopologySuite.Geometries.Utilities.GeometryEditorEx.CoordinateSequenceOperation"/> or <see cref="T:NetTopologySuite.Geometries.Utilities.GeometryEditorEx.CoordinateOperation"/>
            and creating new <see cref="T:GeoAPI.Geometries.IGeometry"/>s with the same structure but
            (possibly) modified components.
            <para>
            Examples of the kinds of modifications which can be made are:
            <list>
            <item>the values of the coordinates may be changed.
            The editor does not check whether changing coordinate values makes the result Geometry invalid.
            </item>
            <item>the coordinate lists may be changed (e.g.by adding, deleting or modifying coordinates).
            The modified coordinate lists must be consistent with their original parent component
            (e.g.a LinearRing must always have at least 4 coordinates, and the first and last coordinate must be equal).
            </item>
            <item>components of the original geometry may be deleted.
            (e.g.holes may be removed from a Polygon, or LineStrings removed from a MultiLineString).
            Deletions will be propagated up the component tree appropriately.
            </item>
            </list>
            All changes must be consistent with the original Geometry's structure
            (e.g.a Polygon cannot be collapsed into a LineString).
            If changing the structure is required, use a <see cref="T:NetTopologySuite.Geometries.Utilities.GeometryTransformer"/>.
            </para>
            <para>
            This class supports creating an edited Geometry
            using a different <c>GeometryFactory</c> via the <see cref="T:NetTopologySuite.Geometries.Utilities.GeometryEditorEx"/> constructor.  
            Examples of situations where this is required is if the geometry is
            transformed to a new SRID and / or a new PrecisionModel. 
            </para>
            <para>
            <strong> Usage Notes </strong>
            <list>
            <item>The resulting Geometry is not checked for validity.
            If validity needs to be enforced, the new Geometry's 
            <see cref="P:GeoAPI.Geometries.IGeometry.IsValid"/> should be called.
            </item>
            <item>By default the UserData of the input geometry is not copied to the result.</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:NetTopologySuite.Geometries.Utilities.GeometryEditorEx._targetFactory">
            The factory used to create the modified Geometry.
            If <tt>null</tt> the GeometryFactory of the input is used.
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryEditorEx.#ctor">
            <summary>
            Creates a new GeometryEditor object which will create edited 
            <see cref="T:GeoAPI.Geometries.IGeometry"/>s with the same <see cref="T:GeoAPI.Geometries.IGeometryFactory"/> as the input Geometry.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryEditorEx.#ctor(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Creates a new GeometryEditor object which will create edited 
            <see cref="T:GeoAPI.Geometries.IGeometry"/>s with the given <see cref="T:GeoAPI.Geometries.IGeometryFactory"/> as the input Geometry.
            </summary>
            <param name="targetFactory">
            The GeometryFactory to create edited Geometrys with.
            </param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryEditorEx.#ctor(NetTopologySuite.Geometries.Utilities.GeometryEditor.IGeometryEditorOperation)">
            <summary>
            Creates a GeometryEditor which edits geometries using
            a given <see cref="T:NetTopologySuite.Geometries.Utilities.GeometryEditor.IGeometryEditorOperation"/>
            and the same <see cref="T:GeoAPI.Geometries.IGeometryFactory"/> as the input Geometry.
            </summary>
            <param name="operation">The edit operation to use.</param>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryEditorEx.#ctor(NetTopologySuite.Geometries.Utilities.GeometryEditor.IGeometryEditorOperation,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Creates a GeometryEditor which edits geometries using
            a given <see cref="T:NetTopologySuite.Geometries.Utilities.GeometryEditor.IGeometryEditorOperation"/>
            and the given <see cref="T:GeoAPI.Geometries.IGeometryFactory"/>.
            </summary>
            <param name="operation">The edit operation to use.</param>
            <param name="targetFactory">The GeometryFactory to create  edited Geometrys with.</param>
        </member>
        <member name="P:NetTopologySuite.Geometries.Utilities.GeometryEditorEx.CopyUserData">
            <summary>
            Gets/Sets whether the User Data is copied to the edit result.
            </summary>
            <remarks>Only the object reference is copied.</remarks>
            <value><c>true</c> if the input user data should be copied.</value>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryEditorEx.Edit(GeoAPI.Geometries.IGeometry)">
            <summary>
            Edit a <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            </summary>
            <remarks>
            Clients can create subclasses of <see cref="T:NetTopologySuite.Geometries.Utilities.GeometryEditor.IGeometryEditorOperation"/>,
            <see cref="T:NetTopologySuite.Geometries.Utilities.GeometryEditorEx.CoordinateSequenceOperation"/> or <see cref="T:NetTopologySuite.Geometries.Utilities.GeometryEditorEx.CoordinateOperation"/> 
            to perform required modifications.
            </remarks>
            <param name="geometry">The Geometry to edit.</param>
            <returns>
            A new <see cref="T:GeoAPI.Geometries.IGeometry"/> which is the result 
            of the editing (which may be empty).
            </returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.Utilities.GeometryEditorEx.NoOpGeometryOperation">
            <summary>
            A GeometryEditorOperation which does not modify the input geometry.
            This can be used for simple changes of GeometryFactory (including PrecisionModel and SRID).
            </summary>
        </member>
        <member name="T:NetTopologySuite.Geometries.Utilities.GeometryEditorEx.CoordinateOperation">
            <summary>
            A <see cref="T:NetTopologySuite.Geometries.Utilities.GeometryEditor.IGeometryEditorOperation"/> which edits 
            the coordinate list of a <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            Operates on <see cref="T:GeoAPI.Geometries.IGeometry"/> subclasses 
            which contains a single coordinate list.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryEditorEx.CoordinateOperation.Edit(GeoAPI.Geometries.Coordinate[],GeoAPI.Geometries.IGeometry)">
            <summary>
            Edits the array of <paramref name="coordinates"/>s from a <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            <remarks>
            If it is desired to preserve the immutability of Geometries,
            if the coordinates are changed a new array should be created
            and returned.
            </remarks>
            </summary>
            <param name="coordinates">The coordinate array to operate on.</param>
            <param name="geometry">The geometry containing the coordinate list.</param>
            <returns>An edited coordinate array (which may be the same as the input).</returns>
        </member>
        <member name="T:NetTopologySuite.Geometries.Utilities.GeometryEditorEx.CoordinateSequenceOperation">
            <summary>
            A <see cref="T:NetTopologySuite.Geometries.Utilities.GeometryEditor.IGeometryEditorOperation"/> which edits 
            the <see cref="T:GeoAPI.Geometries.ICoordinateSequence"/>.
            Operates on <see cref="T:GeoAPI.Geometries.IGeometry"/> subclasses 
            which contains a single coordinate list.
            </summary>
        </member>
        <member name="M:NetTopologySuite.Geometries.Utilities.GeometryEditorEx.CoordinateSequenceOperation.Edit(GeoAPI.Geometries.ICoordinateSequence,GeoAPI.Geometries.IGeometry,GeoAPI.Geometries.IGeometryFactory)">
            Edits a <see cref="T:GeoAPI.Geometries.ICoordinateSequence"/> from a <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            <param name="coordinateSequence">The coordinate array to operate on.</param>
            <param name="geometry">The geometry containing the coordinate list.</param>
            <param name="targetFactory"></param>
            <returns>An edited coordinate sequence (which may be the same as the input).</returns>
        </member>
        <member name="T:NetTopologySuite.Operation.Buffer.VariableWidthBuffer">
            <summary>
            Creates a buffer polygon with variable width along a line.
            <para/>
            Only single lines are supported as input, since buffer widths 
            generally need to be specified specifically for each line.
            </summary>
            <author>Marting Davis</author>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.VariableWidthBuffer.Buffer(GeoAPI.Geometries.ILineString,System.Double,System.Double)">
            <summary>
            </summary>
            <param name="line">the line to buffer</param>
            <param name="startWidth">the buffer width at the start of the line</param>
            <param name="endWidth">the buffer width at the end of the line</param>
            <returns>The variable-width buffer polygon</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.VariableWidthBuffer.Interpolate(GeoAPI.Geometries.ILineString,System.Double,System.Double)">
            <summary>
            Computes a list of values for the points along a line by
            interpolating between values for the start and end point.
            The interpolation is
            based on the distance of each point along the line
            relative to the total line length.
            </summary>
            <param name="line">The line to interpolate along</param>
            <param name="start">The start value</param>
            <param name="end">The end value</param>
            <returns>The array of interpolated values</returns>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.VariableWidthBuffer.#ctor(GeoAPI.Geometries.ILineString,System.Double[])">
            <summary>
            Creates a generator for a variable-width line buffer.
            </summary>
            <param name="line">The line to buffer</param>
            <param name="width">An array of witdth values</param>
        </member>
        <member name="M:NetTopologySuite.Operation.Buffer.VariableWidthBuffer.GetResult">
            <summary>
            Gets the computed variable-width line buffer.
            </summary>
            <returns>A polygon</returns>
        </member>
        <member name="T:NetTopologySuite.SnapRound.GeometrySnapRounder">
            <summary>
            Nodes a <see cref="T:GeoAPI.Geometries.IGeometry"/>s using Snap-Rounding
            to a given <see cref="T:GeoAPI.Geometries.IPrecisionModel"/>.
            <list type="Bullet">
            <item>Point geometries are not handled.They are skipped if present in the input.</item>
            <item>Linestrings which collapse to a point due to snapping are removed.</item>
            <item>Polygonal output may not be valid.</item>
            </list>
            Invalid output is due to the introduction of topology collapses.
            This should be straightforward to clean using standard heuristics(e.g.buffer(0) ).
            The geometry input coordinates are expected to be rounded
            to the given precision model.
            This class does not perform that function.
            <c>GeometryPrecisionReducer</c> may be used to do this.
            </summary>
        </member>
        <member name="M:NetTopologySuite.SnapRound.GeometrySnapRounder.#ctor(GeoAPI.Geometries.IPrecisionModel)">
            <summary>
            Creates a new snap-rounder which snap-rounds to a grid specified
            by the given <see cref="T:GeoAPI.Geometries.IPrecisionModel"/>.
            </summary>
            <param name="pm">The precision model for the grid to snap-round to</param>
        </member>
        <member name="P:NetTopologySuite.SnapRound.GeometrySnapRounder.LineworkOnly">
            <summary>
            Gets or sets a value indicating if only the linework should be treated.
            </summary>
        </member>
        <member name="M:NetTopologySuite.SnapRound.GeometrySnapRounder.Execute(GeoAPI.Geometries.IGeometry)">
            <summary>
            Snap-rounds the given geometry.
            </summary>
            <param name="geom">The geometry to snap-round.</param>
            <returns>The snap-rounded geometry</returns>
        </member>
        <member name="M:NetTopologySuite.SnapRound.SnapRoundFunctions.SnapRoundLines(GeoAPI.Geometries.IGeometry,System.Double)">
            <summary>Reduces precision pointwise, then snap-rounds.
            <para/>
            Note that output set may not contain non-unique linework
            (and thus cannot be used as input to Polygonizer directly).
            <c>UnaryUnion</c> is one way to make the linework unique.
            </summary>
            <param name="geom">A Geometry containing linework to node</param>
            <param name="scaleFactor">The precision model scale factor to use</param>
            <returns>The noded, snap-rounded linework</returns>
        </member>
    </members>
</doc>
